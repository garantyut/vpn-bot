import asyncio
import os
import httpx
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from dotenv import load_dotenv

load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
XUI_BASE_URL = os.getenv("XUI_BASE_URL")
XUI_API_KEY = os.getenv("XUI_API_KEY")

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VPN —á–µ—Ä–µ–∑ 3x-ui.\n"
                         "–û—Ç–ø—Ä–∞–≤—å /users —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

@dp.message(Command("users"))
async def get_users(message: types.Message):
    try:
        async with httpx.AsyncClient(verify=False) as client:
            headers = {"Authorization": XUI_API_KEY}
            response = await client.get(f"{XUI_BASE_URL}/panel/api/inbounds/list", headers=headers)
            data = response.json()
            users = [u["remark"] for inbound in data["obj"] for u in inbound.get("clientStats", [])]
            text = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" + "\n".join(users) if users else "–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
            await message.answer(text)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
